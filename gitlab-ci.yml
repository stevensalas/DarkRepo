############################################
#  Archivo de configuracion del pipeline   #
# #######                          ####### #
#           -  L A N T E R N  -            #
# #######                          ####### #
################################### by Steve

# Declaracion de fases de analisis
stages:
  - test
  - build
  - scan

# Plantillas
include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

# Declaraacion de variables que no se hayan declarado en el proyecto
variables:
  IMAGE_NAME: ${CI_REGISTRY_IMAGE}/build:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHA}

# * INICIO DEL ANALISIS *

# Calidad de codigo
code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]

# Deteccion de secretos
secret_detection:
  artifacts:
    paths:
      - gl-secret-detection-report.json

# Construccion del contenedor de Trivy
trivy_container_build:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  tags:
    - docker
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:latest  .
    - docker push $CI_REGISTRY_IMAGE:latest

# Servicio de escaneo de Trivy
trivy_scan_service:
  stage: scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  services:
    - docker:dind
  tags:
    - docker
  script:
    - trivy --no-progress -f json -o resultados-trivy.json $CI_REGISTRY_IMAGE:latest
  artifacts:
    paths: 
      - resultados-trivy.json
  
# Servicio de escaneo de Anchore
anchore_container_scan:
  stage: scan
  image: docker:stable
  services:
  - docker:stable-dind
  variables:
    DOCKER_DRIVER: overlay2

  script:
  - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin "${CI_REGISTRY}"
  - docker build -t $IMAGE_NAME .
  - apk add bash curl 
  - curl -s https://ci-tools.anchore.io/inline_scan-v0.6.0 | bash -s -- -r -t 500 $IMAGE_NAME
  - docker push $IMAGE_NAME
  - |
      echo "Parsing anchore reports."
      apk add jq
      bash <<'EOF'
      for f in anchore-reports/*; do
        if [[ "$f" =~ "content-os" ]]; then
          printf "n%sn" "The following OS packages are installed on ${IMAGE_NAME}:"
          jq '[.content | sort_by(.package) | .[] | {package: .package, version: .version}]' $f || true
        fi
        if [[ "$f" =~ "vuln" ]]; then
          printf "n%sn" "The following vulnerabilities were found on ${IMAGE_NAME}:"
          jq '[.vulnerabilities | group_by(.package) | .[] | {package: .[0].package, vuln: [.[].vuln]}]' $f || true
        fi
      done
      EOF
  
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}
    paths:
    - anchore-reports/*

